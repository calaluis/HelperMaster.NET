<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HelperMaster.NET</name>
    </assembly>
    <members>
        <member name="T:HelperMaster.NET.Criptografia.AES">
            <summary>
            Clase que define los métodos de encriptación y desencriptación AES de datos complementarios a los que 
            trae .NET Framework.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.Criptografia.AES.Encriptar(System.String)">
            <summary>
            Método que permite encriptar un texto.
            </summary>
            <param name="plainMessage">El texto a encriptar.</param>
            <returns>El texto encriptado.</returns>
        </member>
        <member name="M:HelperMaster.NET.Criptografia.AES.Desencriptar(System.String)">
            <summary>
            Método que permite desencriptar un texto.
            </summary>
            <param name="encryptedMessage">El texto encriptado.</param>
            <returns>El texto desencriptado.</returns>
        </member>
        <member name="T:HelperMaster.NET.DataAnnotations.HelperDataAnnotations">
            <summary>
            Clase de ayudante orientado a procesar Data Annotations.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.DataAnnotations.HelperDataAnnotations.ValidarCamposFormulario(System.Object)">
            <summary>
            Metodo que permite validar los campos de un formulario que utiliza Data Annotations.
            </summary>
            <param name="Formulario">El objeto de formulario a validar.</param>
            <returns>TRUE = No hay errores; FALSE = Hay errores en el formulario.</returns>
        </member>
        <member name="M:HelperMaster.NET.DataAnnotations.HelperDataAnnotations.BucearObjetosParaValidar(System.Object)">
            <summary>
            Metodo que permite validar grandes formularios que contienen jerarquia de clases.
            </summary>
            <param name="Objeto">El objeto de gran formulario a validar.</param>
            <returns>TRUE = No hay errores; FALSE = Hay errores en el formulario.</returns>
        </member>
        <member name="M:HelperMaster.NET.DataAnnotations.HelperDataAnnotations.ValidadorMaestro(System.Object)">
            <summary>
            Metodo que permite validar un formulario cualquiera, utilizando DataAnnotations. 
            NOTA: El alcance del validador no ve mas alla dentro del contenido de una lista generica, porque la lista es una clase de .NET Framework; 
            para ello, debe aplicarse este metodo por segunda vez a la clase DTO que compone la lista declarada; 
            a excepcion para el caso que el flujo de validaciones sea tratado en el mismo lugar (por un bucle que trate la coleccion de datos).
            </summary>
            <param name="Datos">El objeto del formulario proporcionado.</param>
            <returns>TRUE = La validacion ha sido exitosa; FALSE = Error(es) en la validacion.</returns>
        </member>
        <member name="T:HelperMaster.NET.DTO.DatoComboBox">
            <summary>
            Clase que define la estructura de ComboBox o DropDownList utilizados.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.DatoComboBox.nombreOpcion">
            <summary>
            Atributo que guarda o establece la descripcion de la opcion.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.DatoComboBox.numeroOpcion">
            <summary>
            Atributo que guarda o establece la ID de opcion.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.DatoComboBox.esSeleccionado">
            <summary>
            Atributo que guarda o establece si la opcion es seleccionada o no.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.DTO.DatoComboBox.#ctor">
            <summary>
            Metodo constructor que inicializa el objeto.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.DTO.DatoComboBox.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Metodo constructor que inicializa el objeto.
            </summary>
            <param name="nombreOpcion">La descripcion de la opcion.</param>
            <param name="numeroOpcion">La ID de opcion.</param>
            <param name="esSeleccionado">TRUE = esta seleccionado; FALSE = no lo esta.</param>
        </member>
        <member name="M:HelperMaster.NET.DTO.DatoComboBox.SeleccionarElemento(System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox},System.String)">
            <summary>
            Metodo que permite seleccionar un elemento especificado en la lista.
            </summary>
            <param name="ListaElementos">La lista de todos los elementos.</param>
            <param name="numeroOpcion">La ID del elemento seleccionado.</param>
            <returns>La lista de elementos con el elemento seleccionado.</returns>
        </member>
        <member name="M:HelperMaster.NET.DTO.DatoComboBox.SeleccionarElemento(System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Metodo que permite no dejarseleccionado ningun elemento especificado en la lista.
            </summary>
            <param name="ListaElementos">La lista de todos los elementos.</param>
            <returns>La lista de elementos.</returns>
        </member>
        <member name="T:HelperMaster.NET.DTO.Div">
            <summary>
            Clase que define la estructura de datos complementarios a los atributos de un tag DIV HTML.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Div.Visible">
            <summary>
            Atributo que guarda o establece si el tag DIV es visible o no.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Div.ReadOnly">
            <summary>
            Atributo que guarda o establece si el contenido del tag DIV es de sólo lectura o no.
            </summary>
        </member>
        <member name="T:HelperMaster.NET.DTO.Respuesta`1">
            <summary>
            Clase que permite estandarizar una respuesta del sistema interno.
            </summary>
            <typeparam name="T">Clase generica que acepta la estructura de datos necesitado en ese momento.</typeparam>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.decision">
            <summary>
            Atributo que guarda o establece si la respuesta de la operacion es exitosa (TRUE) o si es fallido (FALSE).
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.mensaje">
            <summary>
            Atributo que guarda o establece el mensaje de justificacion de la decision tomada.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.mensajeDetalle">
            <summary>
            Atributo que guarda o establece el mensaje que detalla al mensaje de justificacion tomada.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.estructuraDatos">
            <summary>
            Atributo que guarda o establece la estructura de datos que se necesita retornar.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.TipoRespuesta">
            <summary>
            Atributo que guarda o establece el tipo de respuesta devuelto.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.Respuesta`1.SubRespuesta">
            <summary>
            Atributo que guarda o establece la respuesta encapsulada.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.DTO.Respuesta`1.MensajeGenerico">
            <summary>
            Metodo que permite obtener un mensaje generico para ser mostrado hacia la capa de presentacion.
            </summary>
            <returns>Los datos genericos de error del sistema.</returns>
        </member>
        <member name="M:HelperMaster.NET.DTO.Respuesta`1.CapturarDatos">
            <summary>
            Metodo que permite capturar los datos de respuesta de forma ordenada.
            </summary>
            <returns>Los datos solicitados.</returns>
        </member>
        <member name="M:HelperMaster.NET.DTO.Respuesta`1.MensajeGenerico(HelperMaster.NET.DTO.SubRespuesta)">
            <summary>
            Metodo que permite obtener un mensaje generico para ser mostrado hacia la capa de presentacion.
            </summary>
            <returns>Los datos genericos de error del sistema.</returns>
        </member>
        <member name="T:HelperMaster.NET.DTO.SubRespuesta">
            <summary>
            Clase que permite desacoplar los datos semanticos de respuesta, 
            para ser tranferidos entre capas.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.SubRespuesta.decision">
            <summary>
            Atributo que guarda o establece si la respuesta de la operacion es exitosa (TRUE) o si es fallido (FALSE).
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.SubRespuesta.mensaje">
            <summary>
            Atributo que guarda o establece el mensaje de justificacion de la decision tomada.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.SubRespuesta.mensajeDetalle">
            <summary>
            Atributo que guarda o establece el mensaje que detalla al mensaje de justificacion tomada.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.DTO.SubRespuesta.TipoRespuesta">
            <summary>
            Atributo que guarda o establece el tipo de respuesta devuelto.
            </summary>
        </member>
        <member name="T:HelperMaster.NET.Enum.EstadoCheckBox">
            <summary>
            Enumeracion equivalente a los estados de chequeo de un CheckBox de WindowsForms.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.EstadoCheckBox.Unchecked">
            <summary>
            El control esta desactivado.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.EstadoCheckBox.Checked">
            <summary>
            El control esta activado.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.EstadoCheckBox.Indeterminate">
            <summary>
            El estado de activacion del control es indeterminado. Un control de estado
            indeterminado generalmente tiene una apariencia sombreada.
            </summary>
        </member>
        <member name="T:HelperMaster.NET.Enum.TipoRespuesta">
            <summary>
            Enumeracion que permite clasificar una respuesta del sistema interno.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.Desconocido">
            <summary>
            Desconocido.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.CorrectoNegocio">
            <summary>
            Respuesta correcta o que el proceso ha dado una decision verdadera del negocio.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.AdvReglaNegocio">
            <summary>
            Respuesta correcta con una pequeña advertencia en el flujo de negocioque debe ser subsanado por el usuario a la brevedad posible.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.CorrectoTecnico">
            <summary>
            Respuesta correcta o que el proceso tecnico ha funcionado correctamente.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.ErrorReglaNegocio">
            <summary>
            Respuesta de error cuando no se ha cumplido una regla de negocio especifica.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.ErrorTecnico">
            <summary>
            Respuesta de error cuando ha dado un error tecnico de TRY CATCH.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.Enum.TipoRespuesta.Informacion">
            <summary>
            Respuesta de caracter informativo para el usuario.
            </summary>
        </member>
        <member name="T:HelperMaster.NET.General.Conversion">
            <summary>
            Clase que define los métodos de conversión de datos complementarios a los que 
            trae .NET Framework.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.StringToDecimal(System.String,System.Decimal)">
            <summary>
            Metodo que permite convertir un string a decimal.
            </summary>
            <param name="Numero">El numero a convertir.</param>
            <param name="NumeroPorDefecto">El numero por defecto en caso que la conversion falle.</param>
            <returns>TRUE = El número convertido; FALSE = el numero por defecto.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.StringToInt32(System.String,System.Int32)">
            <summary>
            Metodo que permite convertir un string a int de 32 bits.
            </summary>
            <param name="Numero">El numero a convertir.</param>
            <param name="NumeroPorDefecto">El numero por defecto en caso que la conversion falle.</param>
            <returns>TRUE = El número convertido; FALSE = el numero por defecto.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.StringToInt64(System.String,System.Int64)">
            <summary>
            Metodo que permite convertir un string a int de 64 bits.
            </summary>
            <param name="Numero">El numero a convertir.</param>
            <param name="NumeroPorDefecto">El numero por defecto en caso que la conversion falle.</param>
            <returns>TRUE = El número convertido; FALSE = el numero por defecto.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.StringToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Metodo que permite convertir un string a DateTime.
            </summary>
            <param name="FechaStr">La fecha en string.</param>
            <param name="FechaPorDefecto">La fecha por defecto en caso que la conversion falle.</param>
            <returns>TRUE = La fecha convertida; FALSE = La fecha por defecto.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.StringToDouble(System.String,System.Double)">
            <summary>
            Metodo que permite convertir un string a double.
            </summary>
            <param name="Numero">El numero a convertir.</param>
            <param name="NumeroPorDefecto">El numero por defecto en caso que la conversion falle.</param>
            <returns>TRUE = El número convertido; FALSE = el numero por defecto.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.ListOfStringToString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Método que convierte una lista de string en una sola variable de string.
            </summary>
            <param name="Lista">La lista de string proporcionada.</param>
            <param name="Separador">Caracter separador</param>
            <returns>TRUE = Los datos procesados; FALSE = Datos vacíos.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.ListOfIntToString(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Método que convierte una lista de enteros en una sola variable de string.
            </summary>
            <param name="Lista">La lista de enteros proporcionada.</param>
            <param name="Separador">Caracter separador</param>
            <returns>TRUE = Los datos procesados; FALSE = Datos vacíos.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.Arreglo2DTo1D(System.Int32[0:,0:])">
            <summary>
            Método que permite convertir de un arreglo de dos dimensiones a una dimensión.
            </summary>
            <param name="Datos">El arreglo de dos dimensiones.</param>
            <returns>El arreglo de una dimensión.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Conversion.Arreglo1DTo2D(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Método que permite convertir un arreglo de una dimensión a un arreglo de dos dimensiones.
            </summary>
            <param name="Datos">El arreglo de una dimensión.</param>
            <param name="Filas">Las filas del arreglo.</param>
            <param name="Columnas">Las columnas del arreglo.</param>
            <returns>El arreglo de dos dimensiones.</returns>
        </member>
        <member name="T:HelperMaster.NET.General.CustomImageTagProcessor">
            <summary>
            Clase que permite modificar el procesador de imágenes en base 64.
            </summary>
        </member>
        <member name="T:HelperMaster.NET.General.DataTableX">
            <summary>
            Clase que permite el mapeo dinámico de una tupla de objeto DataTable hacia otro 
            objeto de forma optimizada, utilizado en ADO.NET.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.DataTableX.AsDynamicEnumerable(System.Data.DataTable)">
            <summary>
            Metodo que permite convertir un DataTable a un objeto dinamico.
            </summary>
            <param name="table">El DataTable a procesar.</param>
            <returns>La tupla dinamica.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.DataTableX.ExisteCampo(System.Object,System.String)">
            <summary>
            Metodo que permite saber, si el campo a ser mostrado existe o no.
            </summary>
            <param name="Estructura">La estructura de la tupla obtenida.</param>
            <param name="NombreCampo">El nombre del campo.</param>
            <returns>TRUE = Existe el campo; FALSE = No existe.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.DataTableX.ExisteCampoConDatos(System.Object,System.String)">
            <summary>
            Metodo que permite saber, si el campo a ser mostrado existe o no, y tambien si tiene datos.
            </summary>
            <param name="Estructura">La estructura de la tupla obtenida.</param>
            <param name="NombreCampo">El nombre del campo.</param>
            <returns>TRUE = Existe el campo; FALSE = No existe.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.DataTableX.ObtenerTipificacion(System.Object,System.String,System.Type)">
            <summary>
            Metodo que permite obtener el dato tipificado.
            </summary>
            <param name="Estructura">La estructura de la tupla obtenida.</param>
            <param name="NombreCampo">El nombre del campo.</param>
            <param name="Tipificacion">La tipificacion final deseada. 
            Si no se sabe la tipifacion de origen, debe poner DBNull.Value.GetType(), 
            para lo cual, el sistema lo tomara como string.</param>
            <returns>TRUE = El dato tipificado; FALSE = El dato seteado como vacio y sin significado alguno para el negocio.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.DataTableX.ObtenerListaColumnas(System.Data.DataTable)">
            <summary>
            Metodo que permite obtener los nombres de columnas de una tupla.
            </summary>
            <param name="Datos">La tupla llenada.</param>
            <returns>La lista de columnas con sus tipificaciones.</returns>
        </member>
        <member name="T:HelperMaster.NET.General.Helper">
            <summary>
            Clase de ayuda que permite subsanar fragmentos de funcionalidades técnicas.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.ConsultarArchivoDesdeEnsamblado(System.String,System.String)">
            <summary>
            Metodo que permite obtener un archivo incrustado desde el ensamblado para ser guardado en disco.
            </summary>
            <param name="NombreArchivo">El nombre del archivo a obtener dentro del ensamblado.</param>
            <param name="NombreArchivoEnsamblado"></param>
            <returns>TRUE = La ruta fisica del archivo rescatado; FALSE = El archivo no fue encontrado dentro del ensamblado.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.CompatibilizarCaracterEnXML(System.String)">
            <summary>
            Método que permite compatibilizar un metacaracter en XML o HTML.
            </summary>
            <param name="Palabra">La cadena a compatibilizar.</param>
            <returns>La cadena compatibilizada.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.AddItem(System.String[],System.String)">
            <summary>
            Metodo que permite agregar un item a un arreglo de cadenas.
            </summary>
            <param name="Datos">Los datos del arreglo actual.</param>
            <param name="Dato">El dato de cadena a agregar.</param>
            <returns>El arreglo de cadenas resultante.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.Arreglo2DTo1D(System.Int32[0:,0:])">
            <summary>
            Método que permite convertir de un arreglo de dos dimensiones a una dimensión.
            </summary>
            <param name="Datos">El arreglo de dos dimensiones.</param>
            <returns>El arreglo de una dimensión.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.Arreglo1DTo2D(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Método que permite convertir un arreglo de una dimensión a un arreglo de dos dimensiones.
            </summary>
            <param name="Datos">El arreglo de una dimensión.</param>
            <param name="Filas">Las filas del arreglo.</param>
            <param name="Columnas">Las columnas del arreglo.</param>
            <returns>El arreglo de dos dimensiones.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.Helper.GenerarImagenEnStringBase64(System.Byte[])">
            <summary>
            Método que permite convertir un arreglo de bytes de una imagen, a variable de cadena de la misma imagen en base 64. 
            Esto permite manipular el muestreo de las imágenes en memoria, sin necesidad de guardar la imagen en un servidor de archivos 
            para ser mostrado en una página web.
            </summary>
            <param name="ArchivoImagen">El archivo de imagen en arreglo de bytes.</param>
            <returns>La imgen en variable de cadena en base 64.</returns>
        </member>
        <member name="T:HelperMaster.NET.General.PaginacionEnVolumenes`1">
            <summary>
            Clase que permite gestionar los valores al momento de realizar 
            una paginación de una consulta a la base de datos. Este tipo de paginación 
            es muy parecido, cuando se quiera particiionar un set de datos en partes (split).
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.Tupla">
            <summary>
            Atributo que guarda o establece el resultado de la consulta.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.NumeroPagina">
            <summary>
            Atributo que guarda o establece el número de página.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.NumeroPaginas">
            <summary>
            Atributo que guarda o establece el número de páginas que tiene el resultado.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.FilasPorPagina">
            <summary>
            Atributo que guarda o establece la cantidad de filas por página.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.EsPaginaAnterior">
            <summary>
            Atributo que guarda o establece si hay o no una página anterior.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.EsPaginaSiguiente">
            <summary>
            Atributo que guarda o establece si hay o no una página siguiente.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionEnVolumenes`1.EsUltimaPagina">
            <summary>
            Atributo que guarda o establece si la páfgina actual es la última página.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionEnVolumenes`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Método Constructor que permite inicializar los parámetros necesarios para realizar paginación.
            </summary>
            <param name="NumeroPagina">Número de página.</param>
            <param name="FilasPorPagina">Filas por página.</param>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionEnVolumenes`1.RealizarPaginacion(HelperMaster.NET.General.PaginacionEnVolumenes{`0})">
            <summary>
            Método que permite aplicar paginación a una tupla genérica.
            </summary>
            <param name="DatosTupla">La información de los datos a paginar.</param>
            <returns>La información procesada y paginada.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionEnVolumenes`1.NumeroDePaginas(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Método que permite obtener el número de páginas total de una tupla de lista genérica.
            </summary>
            <param name="DatosTupla">Los datos de la tupla a procesar.</param>
            <param name="FilasPorPagina">la cantidad de filas por página.</param>
            <returns>El número de páginas total.</returns>
        </member>
        <member name="T:HelperMaster.NET.General.PaginacionTupla">
            <summary>
            Resumen: Clase que permite realizar paginación a través de un procedimiento almacenado, es decir, 
            la paginación debe ser realizada por un procedimiento almacenado por medio de los parámetros 
            entregados por esta clase aplicada. Para más información de su utilización, visite la página web del proyecto.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Nro_Filas">
            <summary>
            Obtiene o establece el numero de filas obtenidas desde la BD.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Nro_Filas_Por_Pagina">
            <summary>
            Obtiene o establece el numero de filas por pagina.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Nro_Pag">
            <summary>
            Obtiene o establece el numero de pagina mostrada.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Paginas_Total">
            <summary>
            Obtiene o establece el numero de paginas totales con respecto al numero de filas.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Resto_Filas">
            <summary>
            Obtiene o establece la cantidad de filas minoritarias que es menor al nro. de filas por pagina.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Pag_Ini">
            <summary>
            Obtiene o establece la representacion de la fila inicial al delimitar la tupla.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Pag_Fin">
            <summary>
            Obtiene o establece la representacion de la fila final al delimitar la tupla.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PaginacionTupla.Numero_De_Pagina">
            <summary>
            Obtiene o establece el numero de pagina ingresada por el usuario.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.CalculoPaginacion(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que realiza el calculo de la paginacion.
            </summary>
            <param name="Pag">Los datos a paginar.</param>
            <returns>El calculo con los resultados en los datos cambiados.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.ConsultaPaginacion(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite realizar la consulta en forma paginada.
            </summary>
            <param name="Pag">Los valores necesarios para realizar la paginacion.</param>
            <returns>Los valores para paginar.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.IndicePrimero(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite obtener la primera pagina de la tupla.
            </summary>
            <param name="Pag">Los datos necesarios a paginar.</param>
            <returns>Los valores para establecer la primera pagina.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.IndiceAnterior(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite obtener la pagina anterior de toda la tupla.
            </summary>
            <param name="Pag">Los datos necesarios para paginar.</param>
            <returns>Los valores para establecer la pagina anterior.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.NumeroPagina(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite obtener la pagina elegida por el usuario.
            </summary>
            <param name="Pag">Los datos necesarios para paginar.</param>
            <returns>Los valores para establecer la pagina elegida por el usuario.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.IndicePosterior(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite obtener la pagina siguiente de toda la tupla.
            </summary>
            <param name="Pag">Los datos necesarios para paginar.</param>
            <returns>Los valores para establecer la pagina siguiente.</returns>
        </member>
        <member name="M:HelperMaster.NET.General.PaginacionTupla.IndiceUltimo(HelperMaster.NET.General.PaginacionTupla)">
            <summary>
            Metodo que permite obtener la ultima pagina de toda la tupla.
            </summary>
            <param name="Pag">Los datos necesarios para paginar.</param>
            <returns>Los valores para establecer la ultima pagina.</returns>
        </member>
        <member name="T:HelperMaster.NET.General.PDF">
            <summary>
            Clase que permite realizar la conversión de una plantilla de documento HTML a PDF.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PDF.PlantillaPDF">
            <summary>
            Atributo que guarda o establece los datos de la plantilla XML.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.General.PDF.ArchivoPDF">
            <summary>
            Atributo que guarda o establece el archivo PDF convertido.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.PDF.#ctor(System.String)">
            <summary>
            Método constructor que permite cargar el archivo XML en memoria, para ser manipulada.
            </summary>
            <param name="RutaPlantillaPDF">La ruta del archivo XML de plantilla.</param>
        </member>
        <member name="M:HelperMaster.NET.General.PDF.#ctor(System.Byte[])">
            <summary>
            Método constructor que permite cargar el archivo XML en memoria, para ser manipulada.
            </summary>
            <param name="PlantillaBinario">El archivo binario de la plantilla.</param>
        </member>
        <member name="M:HelperMaster.NET.General.PDF.GenerarPDF">
            <summary>
            Método que permite realizar la conversión de XML a PDF.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.General.PDF.GenerarPDF(System.Collections.Generic.List{System.String})">
            <summary>
            Método que permite realizar la conversión de HTML a PDF.
            </summary>
            <param name="ListaRutasArchivosCSS">La lista de rutas de archivos CSS a incluir en el informe.</param>
        </member>
        <member name="T:HelperMaster.NET.MVC.HelperMVC">
            <summary>
            Clase de ayudante orientado al arquetipo MVC.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ConsultarValorEnlazadorModelo(System.Web.Mvc.ValueProviderResult,System.String)">
            <summary>
            Método que permite capturar un dato proveniente de la vista.
            </summary>
            <param name="Valor">El valor proveniente del proveedor de valores.</param>
            <param name="ValorDefecto">El valor por defecto que es palabra vacía.</param>
            <returns>El valor capturado.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ConsultarValorEnlazadorModelo(System.Web.Mvc.ModelBindingContext,System.String,System.Type)">
            <summary>
            Método que permite capturar un dato proveniente de la vista.
            </summary>
            <param name="bindingContext">El contexto de enlazador de modelos proporcionado.</param>
            <param name="Valor">El valor que especifica la variable declarada en la vista.</param>
            <param name="Tipificacion">La tipificación deseada del valor capturado.</param>
            <returns>El valor capturado con su tipificación deseada.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ExtraerNumeroDeMascara(System.String,System.Type)">
            <summary>
            Método que permite extraer el número encontrado dentro de una máscara que proviene desde la interfaz usuaria.
            </summary>
            <param name="NumeroEnMascara">El número que está dentro de una máscara.</param>
            <param name="Tipificacion">La tipificación numérica deseada.</param>
            <returns>El número sin la máscara con su tipificación específica.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ToSelectList">
            <summary>
            Método que permite setear un arreglo de datos en la interfaz usuaria.
            </summary>
            <returns>El arreglo de datos seteado.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ToSelectList(System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Método que permite parsear una lista de datos a un arreglo de datos de la interfaz usuaria.
            </summary>
            <param name="Generico">La lista de datos genéricos.</param>
            <returns>El arreglo de datos para la interfaz usuaria.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ToSelectListDos(System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Método que permite parsear una lista de datos a un arreglo de datos de la interfaz usuaria 
            (no incluye la opción (Seleccione Opcion)).
            </summary>
            <param name="Generico">La lista de datos genéricos.</param>
            <returns>El arreglo de datos para la interfaz usuaria.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ToMultiSelectList(System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Método que permite parsear una lista de datos genérica a una lista de caja de datos de la interfaz usuaria.
            </summary>
            <param name="Generico">La lista de datos genéricos.</param>
            <returns>El arreglo de lista de caja de datos para la interfaz usuaria.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HelperMVC.ObtenerDisplayName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Método que permite extraer el nombre de etiqueta de un atributo de entidad de clase específica.
            </summary>
            <typeparam name="TModel">La clase de entidad proporcionada.</typeparam>
            <param name="expression">La expresión lamda determinada (se especifica el atributo a extraer su etiqueta).</param>
            <returns>La etiqueta extraída.</returns>
        </member>
        <member name="T:HelperMaster.NET.MVC.HtmlHelperMVC">
            <summary>
            Clase que permite complementar Helpers de los ya existentes hacia la vista.
            </summary>
        </member>
        <member name="F:HelperMaster.NET.MVC.HtmlHelperMVC._Reporte">
            <summary>
            Campo oculto que guarda el objeto de reporte.
            </summary>
        </member>
        <member name="P:HelperMaster.NET.MVC.HtmlHelperMVC.Reporte">
            <summary>
            Atributo que guarda o establece el objeto de reporte.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.DivFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,HelperMaster.NET.DTO.Div}},System.Web.Mvc.MvcHtmlString,System.Object)">
            <summary>
            Método Helper que permite utilizar el tag DIV de forma automatizada dentro de un ViewModel.
            </summary>
            <typeparam name="TModel">El modelo a trabajar.</typeparam>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="expression">La expresión Linq, refiriéndose a un elemento del modelo.</param>
            <param name="SubTag">El tag hijo para incorporar dentro del tag DIV.</param>
            <param name="HtmlAttributes">Atributos adicionales hacia el tag DIV.</param>
            <returns>El tag DIV construido.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.DivFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,HelperMaster.NET.DTO.Div}},System.Collections.Generic.List{System.Web.Mvc.MvcHtmlString},System.Object)">
            <summary>
            Método Helper que permite utilizar el tag DIV de forma automatizada dentro de un ViewModel.
            </summary>
            <typeparam name="TModel">El modelo a trabajar.</typeparam>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="expression">La expresión Linq, refiriéndose a un elemento del modelo.</param>
            <param name="ListaSubTag">El(los) tag(s) hijo(s) para incorporar dentro del tag DIV.</param>
            <param name="HtmlAttributes">Atributos adicionales hacia el tag DIV.</param>
            <returns>El tag DIV construido.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.HiddenEncryptFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Método Helper que permite utilizar el tag INPUT de tipo HIDDEN de forma automatizada dentro de un ViewModel.
            </summary>
            <typeparam name="TModel">El modelo a trabajar.</typeparam>
            <typeparam name="TValue">El valor a trabajar.</typeparam>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="expression">La expresión Linq, refiriéndose a un elemento del modelo.</param>
            <returns>El tag INPUT tipo HIDDEN construido.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,HelperMaster.NET.Enum.EstadoCheckBox}})">
            <summary>
            Método Helper que permite utilizar el tag INPUT de tipo CHECKBOX de forma automatizada dentro de un ViewModel.
            </summary>
            <typeparam name="TModel">El modelo a trabajar.</typeparam>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="expression">La expresión Linq, refiriéndose a un elemento del modelo.</param>
            <returns>El tag INPUT tipo CHECKBOX construido.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.VisorReporte(System.Web.Mvc.HtmlHelper,Microsoft.Reporting.WebForms.ReportViewer)">
            <summary>
            Método Helper que permite mostrar un reporte específico en pantalla.
            </summary>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="Reporte">El objeto de Reporte.</param>
            <returns>El reporte procesado para ser mostrado en pantalla.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.VisorReporte(System.Web.Mvc.HtmlHelper,Microsoft.Reporting.WebForms.ReportViewer,System.Object)">
            <summary>
            Método Helper que permite mostrar un reporte específico en pantalla.
            </summary>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="Reporte">El objeto de Reporte.</param>
            <param name="AtributosHTML">Los atributos HTML del TAG IFRAME.</param>
            <returns>El reporte procesado para ser mostrado en pantalla.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.ObtenerMarco(Microsoft.Reporting.WebForms.ReportViewer,System.Object)">
            <summary>
            Método que permite definir el marco (IFRAME) para la reportería.
            </summary>
            <param name="Reporte">El objeto de Reporte.</param>
            <param name="AtributosHTML">Los atributos HTML del IFRAME.</param>
            <returns>El IFRAME procesado.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.VisorReporte(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Método Helper que permite mostrar un reporte específico en pantalla.
            </summary>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="CodigoReporte">Un código distintivo del reporte.</param>
            <param name="DatosEntrada">Los datos de entrada serializados por JSON.</param>
            <param name="NombreVistaReporte">El nombre de la vista que procesará la petición.</param>
            <returns>El reporte procesado para ser mostrado en pantalla.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.VisorReporte(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Método Helper que permite mostrar un reporte específico en pantalla.
            </summary>
            <param name="helper">El Helper de MVC (tomado de forma implícita).</param>
            <param name="CodigoReporte">Un código distintivo del reporte.</param>
            <param name="DatosEntrada">Los datos de entrada serializados por JSON.</param>
            <param name="NombreVistaReporte">El nombre de la vista que procesará la petición.</param>
            <param name="AtributosHTML">Los atributos HTML del TAG IFRAME.</param>
            <returns>El reporte procesado para ser mostrado en pantalla.</returns>
        </member>
        <member name="M:HelperMaster.NET.MVC.HtmlHelperMVC.ObtenerMarco(System.String,System.String,System.String,System.Object)">
            <summary>
            Método que permite definir el marco (IFRAME) para la reportería.
            </summary>
            <param name="CodigoReporte">Un código distintivo del reporte.</param>
            <param name="DatosEntrada">Los datos de entrada serializados por JSON.</param>
            <param name="NombreVistaReporte">El nombre de la vista que procesará la petición.</param>
            <param name="AtributosHTML">Los atributos HTML del IFRAME.</param>
            <returns>El IFRAME procesado.</returns>
        </member>
        <member name="T:HelperMaster.NET.WindowsForms.HelperWindowsForms">
            <summary>
            Clase de ayudante orientado al arquetipo WINDOWS FORMS.
            </summary>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.ObtenerLista(System.Windows.Forms.ComboBox)">
            <summary>
            Metodo estatico que permite realizar una conversion desde un control ComboBox hacia una lista generica equivalente. 
            NOTA: Este funciona a cualquier tipo de tipificacion de la ID del item seleccionado, es decir, 
            perfectamente la ID puede ser de tipo string.
            </summary>
            <param name="Datos">Datos que contiene un control ComboBox de Windows Forms.</param>
            <returns>Los datos convertidos en una lista generica.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.ObtenerLista(System.Windows.Forms.DataGridViewComboBoxCell)">
            <summary>
            Metodo estatico que permite realizar una conversion desde un control DataGridViewComboBoxCell hacia una lista generica equivalente. 
            NOTA: Este funciona a cualquier tipo de tipificacion de la ID del item seleccionado, es decir, 
            perfectamente la ID puede ser de tipo string.
            </summary>
            <param name="Datos">Datos que contiene un control DataGridViewComboBoxCell de Windows Forms.</param>
            <returns>Los datos convertidos en una lista generica.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.ListaToComboBox(System.Windows.Forms.ComboBox,System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Metodo que permite poblar un ComboBox a partir de los datos estandarizados que se obtienen desde la capa inferior.
            </summary>
            <param name="EstructuraWinForm">El objeto ComboBox ya definido.</param>
            <param name="Datos">Los datos obtenidos.</param>
            <returns>El ComboBox poblado.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.ListaToComboBoxCell(System.Windows.Forms.DataGridViewComboBoxCell,System.Collections.Generic.List{HelperMaster.NET.DTO.DatoComboBox})">
            <summary>
            Metodo que permite poblar un DataGridViewComboBoxCell a partir de los datos estandarizados que se obtienen desde la capa inferior.
            </summary>
            <param name="EstructuraWinForm">El objeto DataGridViewComboBoxCell ya definido.</param>
            <param name="Datos">Los datos obtenidos.</param>
            <returns>El ComboBox poblado.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.ObtenerLista(System.Windows.Forms.ListBox)">
            <summary>
            Metodo estatico que permite realizar una conversion desde un control ListBox hacia una lista generica equivalente. 
            NOTA: Este funciona a cualquier tipo de tipificacion de la ID del item seleccionado, es decir, 
            perfectamente la ID puede ser de tipo string.
            </summary>
            <param name="Datos">Datos que contiene un control ListBox de Windows Forms.</param>
            <returns>Los datos convertidos en una lista generica.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.VentanaActiva``1">
            <summary>
            Metodo que permite saber, si una ventana de formulario esta activo o no en la ejecucion de la aplicacion.
            </summary>
            <returns>TRUE = Ventna activa; FALSE = No hay ventana activa.</returns>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.CerrarVentana``1">
            <summary>
            Metodo que permite cerrar una ventana de WindowsForms especificada.
            </summary>
            <typeparam name="T">La clase tipificada de ventana a cerrar.</typeparam>
        </member>
        <member name="M:HelperMaster.NET.WindowsForms.HelperWindowsForms.CrearArchivoDesdeEnsamblado(System.String)">
            <summary>
            Metodo que permite obtener un archivo incrustado desde el ensamblado para ser guardado en disco.
            </summary>
            <param name="NombreArchivo">El nombre del archivo a obtener dentro del ensamblado.</param>
            <returns>TRUE = La ruta fisica del archivo rescatado; FALSE = El archivo no fue encontrado dentro del ensamblado.</returns>
        </member>
        <member name="T:SqlServerTypes.Utilities">
            <summary>
            Utility methods related to CLR Types for SQL Server 
            </summary>
        </member>
        <member name="M:SqlServerTypes.Utilities.LoadNativeAssemblies(System.String)">
            <summary>
            Loads the required native assemblies for the current architecture (x86 or x64)
            </summary>
            <param name="rootApplicationPath">
            Root path of the current application. Use Server.MapPath(".") for ASP.NET applications
            and AppDomain.CurrentDomain.BaseDirectory for desktop applications.
            </param>
        </member>
    </members>
</doc>
